import heapq

class Node:
    def __init__(self, position):
        self.position = position
        self.g_score = float('inf')  # Cost from start node to current node
        self.h_score = 0  # Heuristic score (estimated cost from current node to goal node)
        self.f_score = float('inf')  # g_score + h_score
        self.parent = None

    def __lt__(self, other):
        return self.f_score < other.f_score

def calculate_heuristic(current, goal):
    # Calculate the Manhattan distance between two points
    return abs(current[0] - goal[0]) + abs(current[1] - goal[1])

def reconstruct_path(node):
    path = []
    while node is not None:
        path.append(node.position)
        node = node.parent
    return path[::-1]

def shortest_path(start, goal, graph):
    open_set = []
    closed_set = set()

    start_node = Node(start)
    start_node.g_score = 0
    start_node.h_score = calculate_heuristic(start_node.position, goal)
    start_node.f_score = start_node.g_score + start_node.h_score
    heapq.heappush(open_set, start_node)

    while open_set:
        current_node = heapq.heappop(open_set)
        if current_node.position == goal:
            return reconstruct_path(current_node)

        closed_set.add(current_node.position)

        for neighbor in graph[current_node.position]:
            if neighbor.position in closed_set:
                continue

            g_score = current_node.g_score + 1  # Assuming a uniform cost of 1 between neighboring nodes

            if g_score < neighbor.g_score:
                neighbor.g_score = g_score
                neighbor.parent = current_node

                if neighbor not in open_set:
                    neighbor.h_score = calculate_heuristic(neighbor.position, goal)
                    neighbor.f_score = neighbor.g_score + neighbor.h_score
                    heapq.heappush(open_set, neighbor)

    return None

# Example usage
graph = {
    (0, 0): [Node((0, 1)), Node((1, 0))],
    (0, 1): [Node((0, 0)), Node((1, 1))],
    (1, 0): [Node((0, 0)), Node((1, 1)), Node((2, 0))],
    (1, 1): [Node((0, 1)), Node((1, 0)), Node((2, 1))],
    (2, 0): [Node((1, 0)), Node((2, 1))],
    (2, 1): [Node((1, 1)), Node((2, 0))]
}

start = (0, 0)
goal = (2, 1)
path = shortest_path(start, goal, graph)

if path is not None:
    print("Shortest path:", path)
else:
    print("No path found.")
